{
	"CommandSnippet": {
		"prefix": "w-command-base",
		"body": [
			"package ${1:frc.robot}.commands;",
			"",
			"import ${1:frc.robot}.subsystems.${2:ExampleSubsystem};",
			"import edu.wpi.first.wpilibj2.command.CommandBase;",
			"",
			"public class ${3:ExampleCommand} extends CommandBase {",
			"  private final ${2:ExampleSubsystem} m_subsystem;",
			"",
			"  /**",
			"   * Creates a new ${3:ExampleCommand}.",
			"   *",
			"   * @param subsystem The subsystem used by this command.",
			"   */",
			"  public ${3:ExampleCommand}(${2:ExampleSubsystem} subsystem) {",
			"    m_subsystem = subsystem;",
			"    ",
			"    addRequirements(subsystem);",
			"  }",
			"",
			"  // Called when the command is initially scheduled.",
			"  @Override",
			"  public void initialize() {",
			"    ",
			"  }",
			"",
			"  // Called every time the scheduler runs while the command is scheduled.",
			"  @Override",
			"  public void execute() {",
			"    ",
			"  }",
			"",
			"  // Called once the command ends or is interrupted.",
			"  @Override",
			"  public void end(boolean interrupted) {",
			"    ",
			"  }",
			"",
			"  // Returns true when the command should end.",
			"  @Override",
			"  public boolean isFinished() {",
			"    return false;",
			"  }",
			"}",
			""
		],
		"description": "CommandSnippet"
	},
	"SubsystemSnippet": {
		"prefix": "w-subsystem-base",
		"body": [
			"package ${1:frc.robot}.subsystems;",
			"",
			"import edu.wpi.first.wpilibj2.command.SubsystemBase;",
			"",
			"public class ${2:ExampleSubsystem} extends SubsystemBase {",
			"  /** Creates a new ${2:ExampleSubsystem}. */",
			"  public ${2:ExampleSubsystem}() {",
			"    ",
			"  }",
			"",
			"  @Override",
			"  public void periodic() {",
			"    // This method will be called once per scheduler run",
			"  }",
			"",
			"  @Override",
			"  public void simulationPeriodic() {",
			"    // This method will be called once per scheduler run during simulation",
			"  }",
			"}",
			""
		],
		"description": "SubsystemSnippet"
	},
	"NeoMagazine": {
		"prefix": "w-neo-magazine-subsystem",
		"body": [
			"package ${1:frc.robot}.subsystems;",
			"",
			"import edu.wpi.first.wpilibj2.command.SubsystemBase;",
			"",
			"import com.revrobotics.CANSparkMax;",
			"import com.revrobotics.CANSparkMaxLowLevel.MotorType;",
			"",
			"public class Magazine extends SubsystemBase {",
			"  private CANSparkMax m_mag;",
			"  private final double speed = ${2:0.5};",
			"",
			"  public Magazine() {",
			"      m_mag = new CANSparkMax(${3:MagazineID}, MotorType.kBrushless);",
			"      m_mag.restoreFactoryDefaults();",
			"  }",
			"",
			"  public void goUp() {",
			"      m_mag.set(speed);",
			"  }",
			"",
			"  public void goDown() {",
			"      m_mag.set(-speed);",
			"  }",
			"",
			"  public void end() {",
			"      m_mag.set(0.0);",
			"  }",
			"}"
		],
		"description": "NeoMagazine"
	},
	"FalconMagazine": {
		"prefix": "w-falcon-magazine-subsystem",
		"body": [
			"package ${1:frc.robot}.subsystems;",
			"",
			"import edu.wpi.first.wpilibj2.command.SubsystemBase;",
			"",
			"import com.ctre.phoenix.motorcontrol.ControlMode;",
			"import com.ctre.phoenix.motorcontrol.can.TalonFX;",
			"",
			"public class Magazine extends SubsystemBase {",
			"  private TalonFX m_mag;",
			"  private final double speed = ${2:0.5};",
			"",
			"  public Magazine() {",
			"      m_mag = new TalonFX(${3:MagazineID});",
			"      m_mag.configFactoryDefault();",
			"  }",
			"",
			"  public void goUp() {",
			"      m_mag.set(ControlMode.PercentOutput, speed);",
			"  }",
			"",
			"  public void goDown() {",
			"      m_mag.set(ControlMode.PercentOutput, -speed);",
			"  }",
			"",
			"  public void end() {",
			"      m_mag.set(ControlMode.PercentOutput, 0.0);",
			"  }",
			"}"
		],
		"description": "FalconMagazine"
	},
	"MagazineUpCommand": {
		"prefix": "w-up-magazine-command",
		"body": [
			"package ${1:frc.robot}.commands;",
			"",
			"import ${1:frc.robot}.subsystems.${2:Magazine};",
			"import edu.wpi.first.wpilibj2.command.CommandBase;",
			"",
			"public class ${3:MagUp} extends CommandBase {",
			"    private final ${2:Magazine} magazine;",
			" ",
			"    public ${3:MagUp}(${2:Magazine} magazine) {",
			"        this.magazine = magazine;",
			" ",
			"        addRequirements(magazine);",
			"    }",
			" ",
			"    @Override",
			"    public void execute() {",
			"        magazine.goUp();",
			"    }",
			" ",
			"    @Override",
			"    public void end(boolean interrupted) {",
			"        magazine.end();",
			"    }",
			"}"
		],
		"description": "MagazineUpCommand"
	},
	"MagazineDownCommand": {
		"prefix": "w-down-magazine-command",
		"body": [
			"package ${1:frc.robot}.commands;",
			"",
			"import ${1:frc.robot}.subsystems.${2:Magazine};",
			"import edu.wpi.first.wpilibj2.command.CommandBase;",
			"",
			"public class ${3:MagDown} extends CommandBase {",
			"    private final ${2:Magazine} magazine;",
			" ",
			"    public ${3:MagDown}(${2:Magazine} magazine) {",
			"        this.magazine = magazine;",
			" ",
			"        addRequirements(magazine);",
			"    }",
			" ",
			"    @Override",
			"    public void execute() {",
			"        magazine.goDown();",
			"    }",
			" ",
			"    @Override",
			"    public void end(boolean interrupted) {",
			"        magazine.end();",
			"    }",
			"}"
		],
		"description": "MagazineDownCommand"
	},
	"NeoIntake": {
		"prefix": "w-neo-intake-subsystem",
		"body": [
			"package ${1:frc.robot}.subsystems;",
			"",
			"import com.revrobotics.CANSparkMax;",
			"import com.revrobotics.CANSparkMaxLowLevel.MotorType;",
			"",
			"import edu.wpi.first.wpilibj2.command.SubsystemBase;",
			"",
			"public class ${2:Intaker} extends SubsystemBase {",
			"    private CANSparkMax m_intake;",
			"    private final double speed = 0.9;",
			"",
			"    public ${2:Intaker}() {",
			"        m_intake = new CANSparkMax(${3:IntakeID}, MotorType.kBrushless);",
			"        m_intake.restoreFactoryDefaults();",
			"    }",
			"",
			"    public void startIntake() {",
			"        m_intake.set(speed);",
			"    }",
			"",
			"    public void startOuttake() {",
			"        m_intake.set(-speed);",
			"    }",
			"",
			"    public void end() {",
			"        m_intake.set(0);",
			"    }",
			"}",
			""
		],
		"description": "NeoIntake"
	},
	"FalconIntake": {
		"prefix": "w-falcon-intake-subsystem",
		"body": [
			"package ${1:frc.robot}.subsystems;",
			"",
			"import com.ctre.phoenix.motorcontrol.ControlMode;",
			"import com.ctre.phoenix.motorcontrol.can.TalonFX;",
			"",
			"import edu.wpi.first.wpilibj2.command.SubsystemBase;",
			"",
			"public class ${2:Intaker} extends SubsystemBase {",
			"    private TalonFX m_intake;",
			"    private final double speed = 0.9;",
			"",
			"    public ${2:Intaker}() {",
			"        m_intake = new TalonFX(${3:IntakeID});",
			"        m_intake.configFactoryDefault();",
			"    }",
			"",
			"    public void startIntake() {",
			"        m_intake.set(ControlMode.PercentOutput, speed);",
			"    }",
			"",
			"    public void startOuttake() {",
			"        m_intake.set(ControlMode.PercentOutput, -speed);",
			"    }",
			"",
			"    public void end() {",
			"        m_intake.set(ControlMode.PercentOutput, 0);",
			"    }",
			"}",
			""
		],
		"description": "FalconIntake"
	},
	"IntakeCommand": {
		"prefix": "w-intake-command",
		"body": [
			"package ${1:frc.robot}.commands;",
			"",
			"import ${1:frc.robot}.subsystems.Intaker;",
			"import edu.wpi.first.wpilibj2.command.CommandBase;",
			"",
			"public class ${2:Intake} extends CommandBase {",
			"    private final Intaker intaker;",
			" ",
			"    public ${2:Intake}(Intaker intaker) {",
			"        this.intaker = intaker;",
			" ",
			"        addRequirements(intaker);",
			"    }",
			" ",
			"    @Override",
			"    public void execute() {",
			"        intaker.startIntake();",
			"    }",
			" ",
			"    @Override",
			"    public void end(boolean interrupted) {",
			"        intaker.end();",
			"    }",
			"}"
		],
		"description": "IntakeCommand"
	},
	"OuttakeCommand": {
		"prefix": "w-outtake-command",
		"body": [
			"package ${1:frc.robot}.commands;",
			"",
			"import ${1:frc.robot}.subsystems.Intaker;",
			"import edu.wpi.first.wpilibj2.command.CommandBase;",
			"",
			"public class ${2:Outtake} extends CommandBase {",
			"    private final Intaker intaker;",
			" ",
			"    public ${2:Intake}(Intaker intaker) {",
			"        this.intaker = intaker;",
			" ",
			"        addRequirements(intaker);",
			"    }",
			" ",
			"    @Override",
			"    public void execute() {",
			"        intaker.startOuttake();",
			"    }",
			" ",
			"    @Override",
			"    public void end(boolean interrupted) {",
			"        intaker.end();",
			"    }",
			"}"
		],
		"description": "OuttakeCommand"
	},
	"NewFalconMotor": {
		"prefix": "w-falcon",
		"body": [
			"TalonFX ${1:m_motor} = new TalonFX(${2:0});"
		],
		"description": "NewFalconMotor"
	},
	"NewNeoMotor": {
		"prefix": "w-neo",
		"body": [
			"CANSparkMax ${1:m_motor} = new CANSparkMax(${2:0}, MotorType.${3:kBrushless});"
		],
		"description": "NewNeoMotor"
	},
	"FalconConfig": {
		"prefix": "w-falcon-config",
		"body": [
			"TalonFXConfiguration config = new TalonFXConfiguration();"
		],
		"description": "FalconConfig"
	},
	"FalconPID": {
		"prefix": "w-falcon-config-pid",
		"body": [
			"${1:m_motor}.config_kF(${2:slotIdx}, value, ${3:timeoutMs});",
			"${1:m_motor}.config_kP(${2:slotIdx}, value, ${3:timeoutMs});",
			"${1:m_motor}.config_kI(${2:slotIdx}, value, ${3:timeoutMs});",
			"${1:m_motor}.config_kD(${2:slotIdx}, value, ${3:timeoutMs});"
		],
		"description": "FalconPID"
	},
	"NeoPID": {
		"prefix": "w-neo-config-pid",
		"body": [
			"SparkMaxPIDController ${1:m_pidController} = ${2:m_motor}.getPIDController();",
			"${1:m_pidController}.setFF(${3:gain});",
			"${1:m_pidController}.setP(${3:gain});",
			"${1:m_pidController}.setI(${3:gain});",
			"${1:m_pidController}.setD(${3:gain});"
		],
		"description": "NeoPID"
	},
	"NeoPIDVelocity": {
		"prefix": "w-neo-pid-velocity",
		"body": [
			"${1:m_pidController}.setReference(${2:value}, ControlType.kVelocity);"
		],
		"description": "NeoPIDVelocity"
	},
	"FalconPIDVelocity": {
		"prefix": "w-falcon-pid-velocity",
		"body": [
			"${1:m_motor}.set(ControlMode.Velocity, ${2:value});"
		],
		"description": "FalconPIDVelocity"
	},
	"FalconPIDPosition": {
		"prefix": "w-falcon-pid-position",
		"body": [
			"${1:m_motor}.set(ControlMode.Position, ${2:value});"
		],
		"description": "FalconPIDPosition"
	},
	"NeoPIDPosition": {
		"prefix": "w-neo-pid-position",
		"body": [
			"${1:m_pidController}.setReference(${2:value}, ControlType.kPosition);"
		],
		"description": "NeoPIDPosition"
	},
	"SmartDashboardPutNumber": {
		"prefix": "w-smartdashboard-put-number",
		"body": [
			"SmartDashboard.putNumber(\"${1:key}\", ${2:value});"
		],
		"description": "SmartDashboardPutNumber"
	},
	"SmartDashboardGetNumber": {
		"prefix": "w-smartdashboard-get-number",
		"body": [
			"double ${1:num}= SmartDashboard.getNumber(\"${2:key}\", ${3:defaultValue});"
		],
		"description": "SmartDashboardGetNumber"
	},
	"SmartDashboardGetBoolean": {
		"prefix": "w-smartdashboard-get-boolean",
		"body": [
			"boolean ${1:isOn} = SmartDashboard.getBoolean(\"${2:key}\", ${3:defaultValue});"
		],
		"description": "SmartDashboardGetBoolean"
	},
	"SmartDashboardGetString": {
		"prefix": "w-smartdashboard-get-string",
		"body": [
			"String ${1:str} = SmartDashboard.getString(\"${2:key}\", ${3:defaultValue});"
		],
		"description": "SmartDashboardGetString"
	},
	"SmartDashboardPutBoolean": {
		"prefix": "w-smartdashboard-put-boolean",
		"body": [
			"SmartDashboard.putBoolean(\"${1:key}\", ${2:value});"
		],
		"description": "SmartDashboardPutBoolean"
	},
	"SmartDashboardPutString": {
		"prefix": "w-smartdashboard-put-string",
		"body": [
			"SmartDashboard.putString(\"${1:key}\", ${2:value});"
		],
		"description": "SmartDashboardPutString"
	},
	"CommandsButton": {
		"prefix": "w-button",
		"body": [
			"public static final Button ${1:ACTION_NAME} = new Button(${2:ButtonTrigger});"
		],
		"description": "CommandsButton"
	},
	"FalconPercent": {
		"prefix": "w-falcon-percent",
		"body": [
			"${1:m_motor}.set(ControlMode.PercentOutput, ${2:speed});"
		],
		"description": "FalconPercent"
	},
	"NeoPercent": {
		"prefix": "w-neo-percent",
		"body": [
			"${1:m_motor}.set(${2:speed});"
		],
		"description": "NeoPercent"
	}
}